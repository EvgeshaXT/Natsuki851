import disnake
from disnake.ext import commands
import os
from dotenv import load_dotenv

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤
def load_cogs(bot):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–≥–∏ –∏–∑ –ø–∞–ø–∫–∏ cogs, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ IGNORE_FILES –∏–∑ .env"""
    # –§–æ—Ä–º–∞—Ç: IGNORE_FILES = 'file1.py, file2.py, ...'
    ignore_str = os.getenv('IGNORE_FILES', '')
    ignore = [cog for cog in ignore_str.split(', ')] if ignore_str else []
    
    loaded_cogs = []
    errors = []

    for filename in os.listdir('./cogs'):
        if filename.endswith('.py') and filename not in ignore:
            try:
                bot.load_extension(f'cogs.{filename[:-3]}')
                loaded_cogs.append(filename)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–≥: {filename}")
            except Exception as error:
                errors.append(error)
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {filename}: {error}")
        elif filename in ignore:
            print(f"üî¥ –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–≥: {filename}")

    return loaded_cogs, errors

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–≥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ./cogs
def existing_cogs(cog_name):
    return os.path.exists(f'./cogs/{cog_name}.py')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
async def get_bot_last_message(channel):
    async for message in channel.history(limit=10):
        if message.author.bot:
            return message
    return None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞
async def load_cog(bot, ctx, cog_name: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–≥"""
    last_bot_msg = await get_bot_last_message(ctx.channel)
    try:
        bot.load_extension(f'cogs.{cog_name}')
        if "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–≥—Ä—É–∂–∞—é... ‚öôÔ∏è" in last_bot_msg.content:
            await last_bot_msg.reply(f"> –ö–æ–≥ **{cog_name}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ")
        else:
            await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ")
        print(f"‚úÖ –ö–æ–≥ {cog_name} –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ")
    except commands.ExtensionAlreadyLoaded:
        await ctx.reply(f"> –ö–æ–≥ **{cog_name}** —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω! ‚ö†Ô∏è")
    except commands.ExtensionNotFound:
        await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
    except Exception as error:
        await ctx.reply(f"> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞ **{cog_name}**: {error} ‚ùå")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_name}: {error}")

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞
async def reload_cog(bot, ctx, cog_name: str):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–≥ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω)"""
    try:
        bot.reload_extension(f'cogs.{cog_name}')
        await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω üîÑ")
        print(f"üîÑ –ö–æ–≥ {cog_name} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ")
    except commands.ExtensionNotLoaded:
        if existing_cogs(cog_name):
            await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–≥—Ä—É–∂–∞—é... ‚öôÔ∏è")
            await load_cog(bot, ctx, cog_name)
        else:
            await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
    except Exception as error:
        await ctx.reply(f"> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞ **{cog_name}**: {error} ‚ùå")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_name}: {error}")

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞
async def unload_cog(bot, ctx, cog_name: str):
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–≥"""
    try:
        bot.unload_extension(f'cogs.{cog_name}')
        await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –≤—ã–≥—Ä—É–∂–µ–Ω. üî¥")
        print(f"üî¥ –ö–æ–≥ {cog_name} –≤—ã–≥—Ä—É–∂–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ")
    except commands.ExtensionNotLoaded:
        if not existing_cogs(cog_name):
            await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        else:
            await ctx.reply(f"> –ö–æ–≥ **{cog_name}** –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω ‚ö†Ô∏è")
    except Exception as error:
        await ctx.reply(f"> –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∂–µ–Ω–∏–∏ –∫–æ–≥–∞ **{cog_name}**: {error} ‚ùå")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_name}: {error}")

# –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–≥–æ–≤
async def list_cogs(bot, ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–≥–æ–≤ (–∑–∞–≥—Ä—É–∂–µ–Ω—ã/–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)"""
    loaded_cogs = []
    unloaded_cogs = []

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–≥–∏
    for filename in os.listdir('./cogs'):
        if filename.endswith('.py'):
            unloaded_cogs.append(filename[:-3])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–æ–≤
    for cog_name in unloaded_cogs:
        if f'cogs.{cog_name}' in bot.extensions:
            loaded_cogs.append(cog_name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "**üì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–∏—Ö –∫–æ–≥–æ–≤:**\n"
    message += "```\n"
    for cog in unloaded_cogs:
        status = "‚úÖ" if cog in loaded_cogs else "‚ùå"
        message += f"{status} {cog}\n"
    message += "```\n"
    message += "‚úÖ - –∑–∞–≥—Ä—É–∂–µ–Ω—ã; ‚ùå - –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

    await ctx.reply(message)

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–≥–∞–º–∏
def setup_cog_commands(bot):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–≥–∞–º–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–≥
    @bot.command(name='load')
    @commands.has_permissions(administrator=True)
    async def _(ctx, cog_name: str):
        await load_cog(bot, ctx, cog_name)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–≥
    @bot.command(name='reload')
    @commands.has_permissions(administrator=True)
    async def _(ctx, cog_name: str):
        await reload_cog(bot, ctx, cog_name)

    # –í—ã–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–≥
    @bot.command(name='unload')
    @commands.has_permissions(administrator=True)
    async def _(ctx, cog_name: str):
        await unload_cog(bot, ctx, cog_name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–≥–æ–≤
    @bot.command(name='cogs')
    @commands.has_permissions(administrator=True)
    async def _(ctx):
        await list_cogs(bot, ctx)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    load_dotenv()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤
    bot = commands.Bot(command_prefix=commands.when_mentioned, intents=disnake.Intents.all(), help_command=None)
    load_cogs(bot)
    setup_cog_commands(bot)

    @bot.event
    async def on_ready():
        print(f"‚úÖ –ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    @bot.event
    async def on_command_error(ctx, error):
        if isinstance(error, commands.MissingPermissions):
            await ctx.reply("> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")
        elif isinstance(error, commands.CommandNotFound):
            # –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:
            # await ctx.reply("> –£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")
            pass
        else:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.run(os.getenv('TOKEN'))

if __name__ == "__main__":
    main()